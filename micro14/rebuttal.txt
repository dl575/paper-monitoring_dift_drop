General

-How does this work compared to previous work (FlexiTaint, FlexCore, Heapmon,
etc.)?
Run-time monitoring is a well studied problem. However, our work is the first
that proposes a general hardware platform that allows for an adjustable
overhead target by trading off coverage for overhead.  While we use a
core-based monitor to demonstrate techniques, our platform is applicable to
other types of monitors such as FlexCore.

Review-A

-How is metadata dependence graph encoded and processed?
Sources are marked statically in the program by the compiler or programmer
annotation. The dataflow engine stores 2 bits per metadata indicating whether
it is null or invalid. It dynamically propagates this information as
instructions execute.

Review-B

-How does this compare to FlexCore's dropping of events?
We ensure that false positives do not occur when events are dropped. FlexCore
does not prevent these false positives. Our dropping is also more intelligent
by selectively dropping based on the overhead target and importance.

-Baseline overheads are high.
Our overheads are comparable to previous work such as [Newsome NDSS'05]
(24-37x) and [Chen ASID'06] (4-10x). More recent works have aggressively
optimized these monitors to reduce overheads. Yet, the overhead, especially for
monitors with large tags, can still be significant. Our dataflow engine can be
applied to the optimized monitors to further reduce the overhead or enable
coverage at a lower overhead target. 

-The dataflow engine does not track implicit flows. Can this lead to
false positives or negatives?
The monitors that we examined only tracked explicit flows. As a results,
the dataflow engine only needed to track explicit flows.
Monitoring schemes which track implicit flows may require additional
support to ensure no false positives on our hardware platform.

-Why use extra HW + extra core as opposed to a programmable HW unit?
We evaluated our idea on a core-based monitor as this represents the most
flexible design and leverages multi-cores with less hardware changes. However,
our techniques could also be applied to hardware monitors, such as FlexiTaint
and FlexCore, to enable adjustable overheads.

Review-C

-Why choose security monitoring instead of applications like profiling which
 can tolerate partial coverage?
We agree that profiling is a promising application for our platform with
adjustable overhead. We focused on monitors for program bugs because they
address important problems and represent a general case where false positives
need to be handled.

Review-D

-Claiming false negatives can be ignored.
Although full monitoring is always desired, if the performance overheads
of full monitoring cannot be tolerated, then false negatives are a
necessary trade off. The alternative would be to completely disable
monitoring (i.e., 100% false negatives).

-How can your scheme emulate other monitoring techniques?
As the monitor is implemented in software on a core, it can support a wide
range of monitoring operations. Specifically, any technique that monitors
a trace of instructions should be implementable.

Review-E

-How much additional benefit does data-flow filtering provide over
 instruction-type filtering (FlexCore)?
Like FlexCore, our baseline system filters out monitoring for instruction
types which are not relevant to a monitoring technique. The results we
show are the additional benefit of our technique on top of
instruction-type filtering.

-Baseline selected based on what runs on simulator instead of
 state-of-the-art (dynamic allocation of memory).
We implemented dynamic metadata allocation because it is required for monitors
with large metadata (for example, 64-bits per word in bound checking or
32-bits per byte for multi-bit DIFT). We also tested static allocation for 
smaller metadata.

-Processor with hardware support for information flow tracking can provide the
same functionality.
The main focus of our platform is to enable reduced and adjustable overheads
which has not been studied by previous works on hardware support for
information flow tracking. The monitoring techniques we evaluated could be
implemented with a sufficiently configurable information flow tracking
mechanism. However, there are other monitors (e.g., control flow integrity
checking, hardware error detection, race detection, etc.) that cannot be 
implemented as DIFT but can use our technique.

